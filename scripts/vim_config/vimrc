""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""vim判断设置"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""   
" 判断操作系统  
if (has("win32") || has("win64") || has("win32unix"))  
    let g:isWin = 1  
else  
    let g:isWin = 0  
endif  
   
" 判断是终端还是gvim  
if has("gui_running")  
    let g:isGUI = 1  
else  
    let g:isGUI = 0  
endif  

" 设置字符集编码，默认使用utf8  
if (g:isWin)  
    let &termencoding=&encoding " 通常win下的encoding为cp936  
    set fileencodings=utf8,cp936,ucs-bom,latin1  
else  
    set encoding=utf8  
    set fileencodings=utf8,gb2312,gb18030,ucs-bom,latin1  
endif  

" 不使用beep或flash  
"set vb t_vb=  

set history=400  " vim记住的历史操作的数量，默认的是20  
set autoread     " 当文件在外部被修改时，自动重新读取  
set mouse=n     " 在所有模式下都允许使用鼠标，还可以是n,v,i,c等  

" 获取当前路径，将$HOME转化为~  
function! CurDir()  
    let curdir = substitute(getcwd(), $HOME, "~", "g")  
    return curdir  
endfunction  
set statusline=[%n]\ %f%m%r%h\ \|\ \ pwd:\ %{CurDir()}\ \ \|%=\|\ %l,%c\ %p%%\ \|\ ascii=%b,hex=%b%{((&fenc==\"\")?\"\":\"\ \|\ \".&fenc)}\ \|\ %{$USER}\ @\ %{hostname()}\  
   
" 恢复上次文件打开位置  
set viminfo='10,\"100,:20,%,n~/.viminfo  
au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif  
   
" 删除buffer时不关闭窗口  
command! Bclose call <SID>BufcloseCloseIt()  
function! <SID>BufcloseCloseIt()  
    let l:currentBufNum = bufnr("%")  
    let l:alternateBufNum = bufnr("#")  
   
    if buflisted(l:alternateBufNum)  
        buffer #  
    else  
        bnext  
    endif  
   
    if bufnr("%") == l:currentBufNum  
        new  
    endif  
   
    if buflisted(l:currentBufNum)  
        execute("bdelete! ".l:currentBufNum)  
    endif  
endfunction  

"窗口自动最大化，Linux下需要安装wmctrl  
"if has("win32")  
"    au GUIEnter * simalt ~x  
"else  
"    function Maximize_Window()  
"      silent !wmctrl -r :ACTIVE: -b add,maximized_vert,maximized_horz  
"    endfunction  
"    au GUIEnter * call Maximize_Window()  
"endif


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""vim显示设置"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""   
set nocompatible    " 关闭兼容模式，去掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限。不要使用vi的键盘模式，而是vim自己的
syntax enable       " 语法高亮  
filetype plugin on  " 文件类型插件  
filetype indent on  
set shortmess=atI   " 去掉欢迎界面  
autocmd BufEnter * :syntax sync fromstart  
set nu              " 显示行号  或者 set number
set showcmd         " 显示命令  
set lz              " 当运行宏时，在命令执行完成之前，不重绘屏幕  
set hid             " 可以在没有保存的情况下切换buffer  
set backspace=eol,start,indent  
set whichwrap+=<,>,h,l " 退格键和方向键可以换行  
set incsearch       " 增量式搜索  
set nohlsearch  
set hlsearch        " 高亮搜索项
set ignorecase      " 搜索时忽略大小写  
" 用 */# 向 前/后 搜索光标下的单词  
"vnoremap <silent> * :call VisualSearch('f')<CR>  
"vnoremap <silent> # :call VisualSearch('b')<CR>  
set magic           " 额，自己:h magic吧，一行很难解释  
set showmatch       " 显示匹配的括号  
set matchtime=1 " 匹配括号高亮的时间（单位是十分之一秒）
set nobackup        " 关闭备份  
set nowb  
"set noswapfile      " 不使用swp文件，注意，错误退出后无法恢复  
set lbr             " 在breakat字符处而不是最后一个字符处断行  
"set ai              " 自动缩进  
"set si              " 智能缩进  
"set cindent         " C/C++风格缩进  
set wildmenu          
set nofen  
set fdl=10  

" 隐藏滚动条"    
set guioptions-=r 
set guioptions-=L
set guioptions-=b
set showtabline=0 "隐藏顶部标签栏"
"set guifont=Monaco:h13
set guifont=DejaVa\ Sans\ Mono\:h13 "设置字体，vim字体使用的是terminal设置的字体，这里设置无效
syntax on    "开启语法高亮"
"color molokai     " 设置背景主题  ron
let g:solarized_termcolors=256    "solarized主题设置在终端下的设置"
set background=dark        "设置背景色"   
set t_Co=256  
"colorscheme xoria256  
"colorscheme solarized
"set nowrap    "设置不折行"
set fileformat=unix    "设置以unix的格式保存文件"

set showmatch    "显示匹配的括号"
set scrolloff=5        "距离顶部和底部5行"
set laststatus=2    "命令行为两行"
set fenc=utf-8      "文件编码"
set backspace=2
set mouse=a        "启用鼠标,要复制，先按shift再选择内容，再复制
set selection=exclusive
set selectmode=mouse,key
set matchtime=5
set noexpandtab        "不允许扩展table"
set whichwrap+=<,>,h,l
set cursorline        "突出显示当前行"
set cursorcolumn        "突出显示当前列"

" 状态栏  
set laststatus=2      " 总是显示状态栏  
highlight StatusLine cterm=bold ctermfg=yellow ctermbg=blue  

" 插件窗口的宽度，如TagList,NERD_tree等，自己设置  
"let s:PlugWinSize = 25  

" 显示中文帮助
if version >= 603
    set helplang=cn
    set encoding=utf-8
endif


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""python开发设置""""""""""""""""""""""""""""""""""""""""""""""""""""""
"支持PEP8风格的缩进； 这些设置将让Vim中的Tab键就相当于4个标准的空格符，确保每行代码长度不超过80个字符，并且会以unix格式储存文件，避免在推送到Github或分享给其他用户时出现文件转换问题。后面加了|
au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix |

au BufNewFile,BufRead *.js,*.html,*.css
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2 |

" 自动检测文件类型并加载相应的设置
"filetype plugin indent on
"autocmd FileType python setlocal et sta sw=4 sts=4

" Simulate maximize，打开python文件时自动最大化
autocmd FileType python setlocal et sta lines=999 columns=999

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""vim快捷键设置及vim键盘转换设置"""""""""""""""""""""""""""""""""""""""
" ^z快速进入shell  
nmap <C-Z> :shell<cr>  
inoremap <leader>n <esc>  

" Ctrl + S 保存文件
"map <C-s> <ESC>:w<CR>
"imap <C-s> <ESC>:w<CR>a
"vmap <C-s> <ESC>:w<CR>

"从系统剪切板中复制，剪切，粘贴；亲测不可行
" Ctrl + C 选中状态下复制
"vnoremap <C-S-c> "+y
"vnoremap <C-x> "+x
"map <C-A> ggVG$"+y

" Ctrl + V 粘贴剪切板中的内容
"map <C-v> "+p
"imap <C-v> <esc>"+pa
"vmap <C-v> d"+P

" NERD_commenter.vim  
" http://www.vim.org/scripts/script.php?script_id=1218  
" Toggle单行注释/“性感”注释/注释到行尾/取消注释  
"map <leader>cc ,c<space>  
"map <leader>cs ,cs  
"map <leader>c$ ,c$  
"map <leader>cu ,cu  


set tabstop=4 " Tab键的宽度
" 统一缩进为4
set softtabstop=4
set shiftwidth=4
set expandtab " 使用空格代替制表符
set smarttab  " 在行和段开始处使用制表符

" 快捷输入  
" 自动完成括号和引号  
inoremap <leader>1 ()<esc>:let leavechar=")"<cr>i  
inoremap <leader>2 []<esc>:let leavechar="]"<cr>i  
inoremap <leader>3 {}<esc>:let leavechar="}"<cr>i  
inoremap <leader>4 {<esc>o}<esc>:let leavechar="}"<cr>O  
inoremap <leader>q ''<esc>:let leavechar="'"<cr>i  
inoremap <leader>w ""<esc>:let leavechar='"'<cr>i 



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""代码相关""""""""""""""""""""""""""""""""""""""""""""""""""""""
"新建.c,.h,.sh,.java文件，自动插入文件头 
autocmd BufNewFile *.cpp,*.[ch],*.sh,*.rb,*.java,*.py exec ":call SetTitle()" 
""定义函数SetTitle，自动插入文件头 
func SetTitle() 
	"如果文件类型为.sh文件 
	if &filetype == 'sh' 
		call setline(1,"\#!/bin/bash") 
		call append(line("."), "# File: .sh")
		call append(line(".")+1, "# Author:  pipi") 
		call append(line(".")+2, "# Email: pipisorry@126.com") 
		call append(line(".")+3, "") 
    elseif &filetype == 'python'
        call setline(1,"#!/usr/bin/env python3")
        call append(line("."),"# coding=utf-8")
	    call append(line(".")+1, "") 

    elseif &filetype == 'ruby'
        call setline(1,"#!/usr/bin/env ruby")
        call append(line("."),"# encoding: utf-8")
	    call append(line(".")+1, "")

"    elseif &filetype == 'mkd'
"        call setline(1,"<head><meta charset=\"UTF-8\"></head>")
	else 
		call setline(1, "/*************************************************************************") 
		call append(line("."), "	> File Name: ".expand("%")) 
		call append(line(".")+1, "	> Author: ") 
		call append(line(".")+2, "	> Mail: ") 
		call append(line(".")+3, "	> Created Time: ".strftime("%c")) 
		call append(line(".")+4, " ************************************************************************/") 
		call append(line(".")+5, "")
	endif
	if expand("%:e") == 'cpp'
		call append(line(".")+6, "#include<iostream>")
		call append(line(".")+7, "using namespace std;")
		call append(line(".")+8, "")
	endif
	if &filetype == 'c'
		call append(line(".")+6, "#include<stdio.h>")
		call append(line(".")+7, "")
	endif
	if expand("%:e") == 'h'
		call append(line(".")+6, "#ifndef _".toupper(expand("%:r"))."_H")
		call append(line(".")+7, "#define _".toupper(expand("%:r"))."_H")
		call append(line(".")+8, "#endif")
	endif
	if &filetype == 'java'
		call append(line(".")+6,"public class ".expand("%:r"))
		call append(line(".")+7,"")
	endif
	"新建文件后，自动定位到文件末尾
endfunc 
autocmd BufNewFile * normal G

" <f10> 运行python程序
"map <f10> :w<cr>:!$python_interpreter %<cr>
"按F10编译运行
map <F10> :call CompileRunGcc()<CR>
func! CompileRunGcc()
	exec "w"
	if &filetype == 'c'
		exec "!g++ % -o %<"
		exec "!time ./%<"
	elseif &filetype == 'cpp'
		exec "!g++ % -o %<"
		exec "!time ./%<"
	elseif &filetype == 'java' 
		exec "!javac %" 
		exec "!time java %<"
	elseif &filetype == 'sh'
		:!time bash %
	elseif &filetype == 'python'
		exec "!$python_interpreter %"
    elseif &filetype == 'html'
        exec "!firefox % &"
    elseif &filetype == 'go'
"        exec "!go build %<"
        exec "!time go run %"
    elseif &filetype == 'mkd'
        exec "!~/.vim/markdown.pl % > %.html &"
        exec "!firefox %.html &"
	endif
endfunc
"C,C++的调试
map <F8> :call Rungdb()<CR>
func! Rungdb()
	exec "w"
	exec "!g++ % -g -o %<"
	exec "!gdb ./%<"
endfunc


"代码格式优化化
map <c-_> :call FormartSrc()<CR><CR>
func FormartSrc()
    exec "w"
    if &filetype == 'c'
        exec "!astyle --style=ansi -a --suffix=none %"
    elseif &filetype == 'cpp' || &filetype == 'hpp'
        exec "r !astyle --style=ansi --one-line=keep-statements -a --suffix=none %> /dev/null 2>&1"
    elseif &filetype == 'perl'
        exec "!astyle --style=gnu --suffix=none %"
    elseif &filetype == 'py'||&filetype == 'python'
        exec "r !autopep8 -i --aggressive %"
    elseif &filetype == 'java'
        exec "!astyle --style=java --suffix=none %"
    elseif &filetype == 'jsp'
        exec "!astyle --style=gnu --suffix=none %"
    elseif &filetype == 'xml'
        exec "!astyle --style=gnu --suffix=none %"
    else
        exec "normal gg=G"
        return
    endif
    exec "e! %"
endfunc
"结束定义FormartSrc

